class HeatmapRenderer{constructor(t,e,s={}){this.container=t,this.data=e,this.options={type:"click",maxIntensity:100,radius:25,blur:15,gradient:{0:"blue",.3:"cyan",.5:"lime",.7:"yellow",1:"red"},...s},this.canvas=null,this.ctx=null,this.scale=1,this.panX=0,this.panY=0,this.isPanning=!1,this.lastPanPoint={x:0,y:0},this.init()}init(){this.createCanvas(),this.setupInteractions(),this.render()}createCanvas(){this.canvas=document.createElement("canvas"),this.canvas.style.position="absolute",this.canvas.style.top="0",this.canvas.style.left="0",this.canvas.style.pointerEvents="auto",this.canvas.style.zIndex="1000",this.canvas.style.cursor="grab",this.ctx=this.canvas.getContext("2d"),this.container.appendChild(this.canvas),this.resizeCanvas(),window.addEventListener("resize",(()=>this.resizeCanvas()))}setupInteractions(){this.canvas.addEventListener("wheel",(t=>{t.preventDefault();const e=this.canvas.getBoundingClientRect(),s=t.clientX-e.left,i=t.clientY-e.top,a=t.deltaY>0?.9:1.1;this.zoom(a,s,i)})),this.canvas.addEventListener("mousedown",(t=>{this.isPanning=!0,this.canvas.style.cursor="grabbing",this.lastPanPoint={x:t.clientX,y:t.clientY}})),document.addEventListener("mousemove",(t=>{if(!this.isPanning)return;const e=t.clientX-this.lastPanPoint.x,s=t.clientY-this.lastPanPoint.y;this.panX+=e,this.panY+=s,this.lastPanPoint={x:t.clientX,y:t.clientY},this.render()})),document.addEventListener("mouseup",(()=>{this.isPanning=!1,this.canvas.style.cursor="grab"})),this.setupTouchEvents()}setupTouchEvents(){let t=0;this.canvas.addEventListener("touchstart",(e=>{if(1===e.touches.length)this.isPanning=!0,this.lastPanPoint={x:e.touches[0].clientX,y:e.touches[0].clientY};else if(2===e.touches.length){const s=this.getTouchDistance(e.touches[0],e.touches[1]);t=s}})),this.canvas.addEventListener("touchmove",(e=>{if(e.preventDefault(),1===e.touches.length&&this.isPanning){const t=e.touches[0].clientX-this.lastPanPoint.x,s=e.touches[0].clientY-this.lastPanPoint.y;this.panX+=t,this.panY+=s,this.lastPanPoint={x:e.touches[0].clientX,y:e.touches[0].clientY},this.render()}else if(2===e.touches.length){const s=this.getTouchDistance(e.touches[0],e.touches[1]),i=s/t,a=this.canvas.getBoundingClientRect(),n=(e.touches[0].clientX+e.touches[1].clientX)/2-a.left,h=(e.touches[0].clientY+e.touches[1].clientY)/2-a.top;this.zoom(i,n,h),t=s}})),this.canvas.addEventListener("touchend",(()=>{this.isPanning=!1}))}getTouchDistance(t,e){const s=e.clientX-t.clientX,i=e.clientY-t.clientY;return Math.sqrt(s*s+i*i)}zoom(t,e,s){const i=Math.max(.1,Math.min(5,this.scale*t)),a=i/this.scale;this.panX=e-(e-this.panX)*a,this.panY=s-(s-this.panY)*a,this.scale=i,this.render()}resizeCanvas(){const t=this.container.getBoundingClientRect();this.canvas.width=t.width,this.canvas.height=t.height,this.render()}render(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.save(),this.ctx.translate(this.panX,this.panY),this.ctx.scale(this.scale,this.scale),"click"===this.options.type?this.renderClickHeatmap():"scroll"===this.options.type&&this.renderScrollHeatmap(),this.ctx.restore(),this.renderControls()}renderClickHeatmap(){const t=this.createRadialGradient();this.data.forEach((e=>{"click"===e.type&&e.coordinates&&(this.ctx.save(),this.ctx.globalAlpha=Math.min(1,e.intensity/this.options.maxIntensity),this.ctx.fillStyle=t,this.ctx.translate(e.coordinates.pageX,e.coordinates.pageY),this.ctx.fillRect(-this.options.radius,-this.options.radius,2*this.options.radius,2*this.options.radius),this.ctx.restore())}))}renderScrollHeatmap(){const t={};this.data.forEach((e=>{if("scroll"===e.type&&e.scroll){const s=50*Math.floor(e.scroll.y/50);t[s]=(t[s]||0)+1}}));const e=Math.max(...Object.values(t));Object.entries(t).forEach((([t,s])=>{const i=s/e,a=Math.min(1,i);this.ctx.fillStyle=this.getColorForIntensity(i),this.ctx.globalAlpha=a,this.ctx.fillRect(0,parseInt(t),this.canvas.width/this.scale,50)}))}createRadialGradient(){const t=this.ctx.createRadialGradient(0,0,0,0,0,this.options.radius);return Object.entries(this.options.gradient).forEach((([e,s])=>{t.addColorStop(parseFloat(e),s)})),t}getColorForIntensity(t){const e=Object.entries(this.options.gradient);for(let s=0;s<e.length-1;s++){const[i,a]=e[s],[n,h]=e[s+1];if(t>=parseFloat(i)&&t<=parseFloat(n))return h}return e[e.length-1][1]}renderControls(){this.ctx.fillStyle="rgba(0, 0, 0, 0.7)",this.ctx.fillRect(10,10,80,30),this.ctx.fillStyle="white",this.ctx.font="12px Arial",this.ctx.fillText("Reset View",15,28),this.ctx.fillStyle="rgba(0, 0, 0, 0.7)",this.ctx.fillRect(100,10,100,30),this.ctx.fillStyle="white",this.ctx.fillText(`Zoom: ${Math.round(100*this.scale)}%`,105,28),this.canvas.addEventListener("click",(t=>{const e=this.canvas.getBoundingClientRect(),s=t.clientX-e.left,i=t.clientY-e.top;s>=10&&s<=90&&i>=10&&i<=40&&this.resetView()}))}resetView(){this.scale=1,this.panX=0,this.panY=0,this.render()}updateData(t){this.data=t,this.render()}setType(t){this.options.type=t,this.render()}destroy(){this.canvas&&this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas)}}class HeatmapManager{constructor(){this.heatmaps=new Map,this.data=[]}createHeatmap(t,e,s={}){const i=document.getElementById(t);if(!i)return console.error(`Container ${t} not found`),null;const a=new HeatmapRenderer(i,e,s);return this.heatmaps.set(t,a),a}removeHeatmap(t){const e=this.heatmaps.get(t);e&&(e.destroy(),this.heatmaps.delete(t))}updateAllHeatmaps(t){this.data=t,this.heatmaps.forEach((e=>{e.updateData(t)}))}getHeatmap(t){return this.heatmaps.get(t)}}"undefined"!=typeof module&&module.exports?module.exports={HeatmapRenderer:HeatmapRenderer,HeatmapManager:HeatmapManager}:(window.HeatmapRenderer=HeatmapRenderer,window.HeatmapManager=HeatmapManager);