class IntegrationsManager{constructor(t={}){this.config={enabledIntegrations:[],exportFormats:["json","csv","pdf"],...t},this.integrations=new Map,this.exporters=new Map,this.initializeIntegrations(),this.initializeExporters()}initializeIntegrations(){this.registerIntegration("slack",new SlackIntegration),this.registerIntegration("jira",new JiraIntegration),this.registerIntegration("email",new EmailIntegration),this.registerIntegration("webhook",new WebhookIntegration)}initializeExporters(){this.exporters.set("json",new JSONExporter),this.exporters.set("csv",new CSVExporter),this.exporters.set("pdf",new PDFExporter),this.exporters.set("excel",new ExcelExporter)}registerIntegration(t,e){this.integrations.set(t,e)}configureIntegration(t,e){const r=this.integrations.get(t);return!!r&&(r.configure(e),!0)}async sendToIntegration(t,e,r={}){const n=this.integrations.get(t);if(!n)throw new Error(`Integration ${t} not found`);try{return await n.send(e,r)}catch(e){throw console.error(`Failed to send to ${t}:`,e),e}}async exportData(t,e,r={}){const n=this.exporters.get(t);if(!n)throw new Error(`Export format ${t} not supported`);try{return await n.export(e,r)}catch(e){throw console.error(`Failed to export as ${t}:`,e),e}}getAvailableIntegrations(){return Array.from(this.integrations.keys())}getAvailableExportFormats(){return Array.from(this.exporters.keys())}}class SlackIntegration{constructor(){this.webhookUrl=null,this.channel=null,this.username="StandLog Analytics"}configure(t){this.webhookUrl=t.webhookUrl,this.channel=t.channel,this.username=t.username||this.username}async send(t,e={}){if(!this.webhookUrl)throw new Error("Slack webhook URL not configured");const r=this.formatSlackMessage(t,e),n=await fetch(this.webhookUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!n.ok)throw new Error(`Slack API error: ${n.status}`);return{success:!0,platform:"slack"}}formatSlackMessage(t,e){const r={username:this.username,channel:this.channel};return"alert"===e.type?r.attachments=[{color:this.getAlertColor(t.level),title:`ðŸš¨ Analytics Alert: ${t.title}`,text:t.message,fields:[{title:"Metric",value:t.metric,short:!0},{title:"Value",value:t.value,short:!0},{title:"Time",value:new Date(t.timestamp).toLocaleString(),short:!0}],footer:"StandLog Analytics",ts:Math.floor(t.timestamp/1e3)}]:"report"===e.type?r.attachments=[{color:"#2196F3",title:`ðŸ“Š Analytics Report: ${t.title}`,text:t.summary,fields:this.formatReportFields(t.metrics),footer:"StandLog Analytics",ts:Math.floor(Date.now()/1e3)}]:r.text=`StandLog Analytics Data: ${JSON.stringify(t,null,2)}`,r}getAlertColor(t){switch(t){case"critical":return"#F44336";case"warning":return"#FF9800";case"info":return"#2196F3";default:return"#757575"}}formatReportFields(t){return Object.entries(t).map((([t,e])=>({title:t.charAt(0).toUpperCase()+t.slice(1),value:"number"==typeof e?e.toLocaleString():e,short:!0})))}}class JiraIntegration{constructor(){this.baseUrl=null,this.username=null,this.apiToken=null,this.projectKey=null}configure(t){this.baseUrl=t.baseUrl,this.username=t.username,this.apiToken=t.apiToken,this.projectKey=t.projectKey}async send(t,e={}){if(!this.baseUrl||!this.username||!this.apiToken)throw new Error("Jira credentials not configured");const r=this.formatJiraIssue(t,e),n=btoa(`${this.username}:${this.apiToken}`),o=await fetch(`${this.baseUrl}/rest/api/3/issue`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Basic ${n}`},body:JSON.stringify(r)});if(!o.ok)throw new Error(`Jira API error: ${o.status}`);return{success:!0,platform:"jira",issueKey:(await o.json()).key}}formatJiraIssue(t,e){const r={fields:{project:{key:this.projectKey},issuetype:{name:"Task"},summary:`Analytics Alert: ${t.title||"Data Issue"}`,description:this.formatJiraDescription(t,e)}};return"alert"===e.type&&"critical"===t.level&&(r.fields.priority={name:"High"}),r}formatJiraDescription(t,e){let r="";return r="alert"===e.type?`\nh3. Alert Details\n* *Metric:* ${t.metric}\n* *Value:* ${t.value}\n* *Threshold:* ${t.threshold}\n* *Time:* ${new Date(t.timestamp).toLocaleString()}\n\nh3. Message\n${t.message}\n\nh3. Raw Data\n{code:json}\n${JSON.stringify(t,null,2)}\n{code}\n      `:`\nh3. Analytics Data Export\n\n{code:json}\n${JSON.stringify(t,null,2)}\n{code}\n      `,r.trim()}}class EmailIntegration{constructor(){this.apiKey=null,this.fromEmail=null,this.service="sendgrid"}configure(t){this.apiKey=t.apiKey,this.fromEmail=t.fromEmail,this.service=t.service||this.service}async send(t,e={}){if(!this.apiKey||!this.fromEmail)throw new Error("Email service not configured");const r=this.formatEmail(t,e);switch(this.service){case"sendgrid":return await this.sendWithSendGrid(r);case"mailgun":return await this.sendWithMailgun(r);default:throw new Error(`Email service ${this.service} not supported`)}}formatEmail(t,e){return{to:e.recipients||[],subject:e.subject||`StandLog Analytics: ${t.title||"Data Export"}`,html:this.generateEmailHTML(t,e),text:this.generateEmailText(t,e)}}generateEmailHTML(t,e){return"alert"===e.type?`\n        <div style="font-family: Arial, sans-serif; max-width: 600px;">\n          <h2 style="color: #F44336;">ðŸš¨ Analytics Alert</h2>\n          <h3>${t.title}</h3>\n          <p>${t.message}</p>\n          <table style="border-collapse: collapse; width: 100%;">\n            <tr>\n              <td style="border: 1px solid #ddd; padding: 8px;"><strong>Metric</strong></td>\n              <td style="border: 1px solid #ddd; padding: 8px;">${t.metric}</td>\n            </tr>\n            <tr>\n              <td style="border: 1px solid #ddd; padding: 8px;"><strong>Value</strong></td>\n              <td style="border: 1px solid #ddd; padding: 8px;">${t.value}</td>\n            </tr>\n            <tr>\n              <td style="border: 1px solid #ddd; padding: 8px;"><strong>Time</strong></td>\n              <td style="border: 1px solid #ddd; padding: 8px;">${new Date(t.timestamp).toLocaleString()}</td>\n            </tr>\n          </table>\n        </div>\n      `:`\n        <div style="font-family: Arial, sans-serif; max-width: 600px;">\n          <h2 style="color: #2196F3;">ðŸ“Š Analytics Report</h2>\n          <p>Please find your analytics data export attached.</p>\n          <p><strong>Generated:</strong> ${(new Date).toLocaleString()}</p>\n        </div>\n      `}generateEmailText(t,e){return"alert"===e.type?`\nStandLog Analytics Alert\n\n${t.title}\n${t.message}\n\nMetric: ${t.metric}\nValue: ${t.value}\nTime: ${new Date(t.timestamp).toLocaleString()}\n      `.trim():"Analytics data export - see attached file."}async sendWithSendGrid(t){const e=await fetch("https://api.sendgrid.com/v3/mail/send",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`},body:JSON.stringify({personalizations:[{to:t.to.map((t=>({email:t})))}],from:{email:this.fromEmail},subject:t.subject,content:[{type:"text/plain",value:t.text},{type:"text/html",value:t.html}]})});if(!e.ok)throw new Error(`SendGrid API error: ${e.status}`);return{success:!0,platform:"email",service:"sendgrid"}}async sendWithMailgun(t){throw new Error("Mailgun integration not implemented")}}class WebhookIntegration{constructor(){this.webhookUrl=null,this.headers={},this.method="POST"}configure(t){this.webhookUrl=t.webhookUrl,this.headers=t.headers||{},this.method=t.method||"POST"}async send(t,e={}){if(!this.webhookUrl)throw new Error("Webhook URL not configured");const r={timestamp:Date.now(),source:"standlog-analytics",type:e.type||"data",data:t},n=await fetch(this.webhookUrl,{method:this.method,headers:{"Content-Type":"application/json",...this.headers},body:JSON.stringify(r)});if(!n.ok)throw new Error(`Webhook error: ${n.status}`);return{success:!0,platform:"webhook"}}}class JSONExporter{async export(t,e={}){const r={metadata:{exportedAt:(new Date).toISOString(),format:"json",version:"1.0",...e.metadata},data:t},n=JSON.stringify(r,null,e.pretty?2:0);return e.download&&this.downloadFile(n,`analytics-export-${Date.now()}.json`,"application/json"),n}downloadFile(t,e,r){const n=new Blob([t],{type:r}),o=URL.createObjectURL(n),a=document.createElement("a");a.href=o,a.download=e,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(o)}}class CSVExporter{async export(t,e={}){let r="";if(Array.isArray(t))r=this.arrayToCSV(t,e);else{if("object"!=typeof t)throw new Error("Unsupported data format for CSV export");r=this.objectToCSV(t,e)}return e.download&&this.downloadFile(r,`analytics-export-${Date.now()}.csv`,"text/csv"),r}arrayToCSV(t,e){if(0===t.length)return"";const r=e.headers||Object.keys(t[0]),n=[r.join(",")];return t.forEach((t=>{const e=r.map((e=>{const r=t[e]||"";return"string"==typeof r&&r.includes(",")?`"${r}"`:r}));n.push(e.join(","))})),n.join("\n")}objectToCSV(t,e){const r=["Key,Value"];return Object.entries(t).forEach((([t,e])=>{const n="object"==typeof e?JSON.stringify(e):e;r.push(`${t},"${n}"`)})),r.join("\n")}downloadFile(t,e,r){const n=new Blob([t],{type:r}),o=URL.createObjectURL(n),a=document.createElement("a");a.href=o,a.download=e,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(o)}}class PDFExporter{async export(t,e={}){const r=this.generatePDFContent(t,e);if(e.download){console.log("PDF export would be generated here");const t=new Blob([r],{type:"text/plain"}),e=URL.createObjectURL(t),n=document.createElement("a");n.href=e,n.download=`analytics-export-${Date.now()}.txt`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(e)}return r}generatePDFContent(t,e){let r=`\nStandLog Analytics Report\nGenerated: ${(new Date).toLocaleString()}\n${e.title?`Title: ${e.title}`:""}\n\n===========================================\n\n`;return Array.isArray(t)?(r+="Data Records:\n\n",t.forEach(((t,e)=>{r+=`Record ${e+1}:\n`,Object.entries(t).forEach((([t,e])=>{r+=`  ${t}: ${e}\n`})),r+="\n"}))):"object"==typeof t&&(r+="Data Summary:\n\n",Object.entries(t).forEach((([t,e])=>{r+=`${t}: ${"object"==typeof e?JSON.stringify(e):e}\n`}))),r}}class ExcelExporter{async export(t,e={}){const r=new CSVExporter,n=await r.export(t,{...e,download:!1});if(e.download){const t=new Blob([n],{type:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}),e=URL.createObjectURL(t),r=document.createElement("a");r.href=e,r.download=`analytics-export-${Date.now()}.xlsx`,document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(e)}return n}}"undefined"!=typeof module&&module.exports?module.exports={IntegrationsManager:IntegrationsManager,SlackIntegration:SlackIntegration,JiraIntegration:JiraIntegration,EmailIntegration:EmailIntegration,WebhookIntegration:WebhookIntegration,JSONExporter:JSONExporter,CSVExporter:CSVExporter,PDFExporter:PDFExporter,ExcelExporter:ExcelExporter}:(window.IntegrationsManager=IntegrationsManager,window.SlackIntegration=SlackIntegration,window.JiraIntegration=JiraIntegration,window.EmailIntegration=EmailIntegration,window.WebhookIntegration=WebhookIntegration);