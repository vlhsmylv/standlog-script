class StandLogTracker{constructor(e,t={}){this.key=e,this.config={apiUrl:t.apiUrl||"",enableHeatmaps:!1!==t.enableHeatmaps,enableFunnels:!1!==t.enableFunnels,enablePersonas:!1!==t.enablePersonas,enableRealTime:!1!==t.enableRealTime,...t},this.sessionId=null,this.userId=null,this.events=[],this.init()}async init(){await this.identifyUser(),this.setupEventListeners(),this.startTracking()}async identifyUser(){try{return this.sessionId=this.generateSessionId(),this.userId=this.getUserId(),localStorage.setItem("standlog_session",this.sessionId),localStorage.setItem("standlog_user",this.userId),{sessionId:this.sessionId,userId:this.userId}}catch(e){console.error("StandLog: Failed to identify user",e)}}generateSessionId(){return`session_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getUserId(){let e=localStorage.getItem("standlog_user");return e||(e=`user_${Date.now()}_${Math.random().toString(36).substr(2,9)}`),e}setupEventListeners(){if(this.config.enableHeatmaps&&document.addEventListener("click",(e=>this.trackClick(e))),this.config.enableHeatmaps){let e;window.addEventListener("scroll",(()=>{clearTimeout(e),e=setTimeout((()=>this.trackScroll()),100)}))}this.trackPageView(),this.config.enableFunnels&&document.addEventListener("submit",(e=>this.trackFormSubmit(e))),document.addEventListener("visibilitychange",(()=>this.trackVisibilityChange()))}trackClick(e){const t=e.target,n={type:"click",timestamp:Date.now(),element:this.getElementInfo(t),coordinates:{x:e.clientX,y:e.clientY,pageX:e.pageX,pageY:e.pageY},viewport:{width:window.innerWidth,height:window.innerHeight},page:{url:window.location.href,title:document.title}};this.addEvent(n)}trackScroll(){const e={type:"scroll",timestamp:Date.now(),scroll:{x:window.scrollX,y:window.scrollY,maxX:document.documentElement.scrollWidth-window.innerWidth,maxY:document.documentElement.scrollHeight-window.innerHeight},viewport:{width:window.innerWidth,height:window.innerHeight},page:{url:window.location.href,title:document.title}};this.addEvent(e)}trackPageView(){const e={type:"pageview",timestamp:Date.now(),page:{url:window.location.href,title:document.title,referrer:document.referrer},viewport:{width:window.innerWidth,height:window.innerHeight},device:this.getDeviceInfo()};this.addEvent(e)}trackFormSubmit(e){const t=e.target,n={type:"form_submit",timestamp:Date.now(),form:{id:t.id,action:t.action,method:t.method,fields:this.getFormFields(t)},page:{url:window.location.href,title:document.title}};this.addEvent(n)}trackVisibilityChange(){const e={type:"visibility_change",timestamp:Date.now(),visible:!document.hidden,page:{url:window.location.href,title:document.title}};this.addEvent(e)}getElementInfo(e){return{tagName:e.tagName.toLowerCase(),id:e.id,className:e.className,textContent:e.textContent?.trim().substring(0,100),attributes:this.getElementAttributes(e),selector:this.generateSelector(e)}}getElementAttributes(e){const t={};for(const n of e.attributes)t[n.name]=n.value;return t}generateSelector(e){if(e.id)return`#${e.id}`;let t=e.tagName.toLowerCase();return e.className&&(t+=`.${e.className.split(" ").join(".")}`),t}getFormFields(e){const t=[];return e.querySelectorAll("input, select, textarea").forEach((e=>{t.push({name:e.name,type:e.type,value:"password"===e.type?"[HIDDEN]":e.value?.substring(0,100)})})),t}getDeviceInfo(){return{userAgent:navigator.userAgent,language:navigator.language,platform:navigator.platform,cookieEnabled:navigator.cookieEnabled,onLine:navigator.onLine}}addEvent(e){e.sessionId=this.sessionId,e.userId=this.userId,e.projectId=this.key,this.events.push(e),this.events.length>=10&&this.sendEvents()}startTracking(){setInterval((()=>{this.events.length>0&&this.sendEvents()}),5e3),window.addEventListener("beforeunload",(()=>{this.sendEvents(!0)}))}async sendEvents(e=!1){if(0===this.events.length)return;const t={events:[...this.events],meta:{timestamp:Date.now(),url:window.location.href,userAgent:navigator.userAgent}};try{(await fetch(`${this.config.apiUrl}/${this.key}/events`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.key}`},body:JSON.stringify(t),keepalive:e})).ok&&(this.events=[])}catch(e){console.error("StandLog: Failed to send events",e)}}track(e,t={}){const n={type:"custom",name:e,timestamp:Date.now(),properties:t,page:{url:window.location.href,title:document.title}};this.addEvent(n)}getState(){return{sessionId:this.sessionId,userId:this.userId,eventsQueued:this.events.length,config:this.config}}}"undefined"!=typeof module&&module.exports?module.exports=StandLogTracker:window.StandLogTracker=StandLogTracker;