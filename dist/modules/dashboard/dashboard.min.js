class AnalyticsDashboard{constructor(e,t={}){this.container=document.getElementById(e),this.config={autoRefresh:!0,refreshInterval:3e4,enableAlerts:!0,defaultDateRange:"7d",enableRealTime:!0,...t},this.data={metrics:{},events:[],users:{},alerts:[]},this.filters={dateRange:this.config.defaultDateRange,deviceTypes:[],browsers:[],personas:[],pages:[]},this.charts={},this.widgets={},this.init()}init(){this.createDashboardStructure(),this.setupFilters(),this.setupRealTimeUpdates(),this.loadInitialData(),this.config.autoRefresh&&this.startAutoRefresh()}createDashboardStructure(){this.container.innerHTML=`\n      <div class="standlog-dashboard">\n        <div class="dashboard-header">\n          <h1>StandLog Analytics Dashboard</h1>\n          <div class="dashboard-controls">\n            <div class="date-range-selector">\n              <select id="dateRange">\n                <option value="1h">Last Hour</option>\n                <option value="24h">Last 24 Hours</option>\n                <option value="7d" selected>Last 7 Days</option>\n                <option value="30d">Last 30 Days</option>\n                <option value="90d">Last 90 Days</option>\n                <option value="custom">Custom Range</option>\n              </select>\n              <input type="date" id="startDate" style="display: none;">\n              <input type="date" id="endDate" style="display: none;">\n            </div>\n            <div class="refresh-controls">\n              <button id="refreshBtn">Refresh</button>\n              <label>\n                <input type="checkbox" id="autoRefresh" ${this.config.autoRefresh?"checked":""}>\n                Auto Refresh\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        <div class="dashboard-filters">\n          <div class="filter-group">\n            <label>Device:</label>\n            <select id="deviceFilter" multiple>\n              <option value="desktop">Desktop</option>\n              <option value="mobile">Mobile</option>\n              <option value="tablet">Tablet</option>\n            </select>\n          </div>\n          <div class="filter-group">\n            <label>Browser:</label>\n            <select id="browserFilter" multiple>\n              <option value="chrome">Chrome</option>\n              <option value="firefox">Firefox</option>\n              <option value="safari">Safari</option>\n              <option value="edge">Edge</option>\n            </select>\n          </div>\n          <div class="filter-group">\n            <label>Persona:</label>\n            <select id="personaFilter" multiple>\n              <option value="power_user">Power User</option>\n              <option value="casual_user">Casual User</option>\n              <option value="bouncer">Bouncer</option>\n              <option value="mobile_user">Mobile User</option>\n              <option value="converter">Converter</option>\n            </select>\n          </div>\n        </div>\n\n        <div class="dashboard-alerts" id="alertsContainer"></div>\n        \n        <div class="dashboard-metrics">\n          <div class="metric-card" id="usersCard">\n            <h3>Users</h3>\n            <div class="metric-value" id="usersValue">-</div>\n            <div class="metric-change" id="usersChange">-</div>\n          </div>\n          <div class="metric-card" id="pageViewsCard">\n            <h3>Page Views</h3>\n            <div class="metric-value" id="pageViewsValue">-</div>\n            <div class="metric-change" id="pageViewsChange">-</div>\n          </div>\n          <div class="metric-card" id="sessionsCard">\n            <h3>Sessions</h3>\n            <div class="metric-value" id="sessionsValue">-</div>\n            <div class="metric-change" id="sessionsChange">-</div>\n          </div>\n          <div class="metric-card" id="bounceRateCard">\n            <h3>Bounce Rate</h3>\n            <div class="metric-value" id="bounceRateValue">-</div>\n            <div class="metric-change" id="bounceRateChange">-</div>\n          </div>\n        </div>\n        \n        <div class="dashboard-charts">\n          <div class="chart-container">\n            <h3>Traffic Over Time</h3>\n            <canvas id="trafficChart"></canvas>\n          </div>\n          <div class="chart-container">\n            <h3>Device Distribution</h3>\n            <canvas id="deviceChart"></canvas>\n          </div>\n          <div class="chart-container">\n            <h3>Top Pages</h3>\n            <div id="topPagesChart"></div>\n          </div>\n          <div class="chart-container">\n            <h3>User Personas</h3>\n            <canvas id="personasChart"></canvas>\n          </div>\n        </div>\n        \n        <div class="dashboard-tables">\n          <div class="table-container">\n            <h3>Real-Time Activity</h3>\n            <div id="realTimeActivity"></div>\n          </div>\n          <div class="table-container">\n            <h3>Recent Events</h3>\n            <div id="recentEvents"></div>\n          </div>\n        </div>\n      </div>\n    `,this.addDashboardStyles()}addDashboardStyles(){const e=document.createElement("style");e.innerHTML="\n      .standlog-dashboard {\n        font-family: Arial, sans-serif;\n        max-width: 1400px;\n        margin: 0 auto;\n        padding: 20px;\n      }\n      \n      .dashboard-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 20px;\n        padding-bottom: 20px;\n        border-bottom: 1px solid #eee;\n      }\n      \n      .dashboard-controls {\n        display: flex;\n        gap: 20px;\n        align-items: center;\n      }\n      \n      .dashboard-filters {\n        display: flex;\n        gap: 20px;\n        margin-bottom: 20px;\n        padding: 15px;\n        background: #f5f5f5;\n        border-radius: 8px;\n      }\n      \n      .filter-group label {\n        display: block;\n        margin-bottom: 5px;\n        font-weight: bold;\n      }\n      \n      .dashboard-alerts {\n        margin-bottom: 20px;\n      }\n      \n      .alert {\n        padding: 10px 15px;\n        margin-bottom: 10px;\n        border-radius: 5px;\n        border-left: 4px solid;\n      }\n      \n      .alert.warning {\n        background: #fff3cd;\n        border-color: #ffc107;\n        color: #856404;\n      }\n      \n      .alert.danger {\n        background: #f8d7da;\n        border-color: #dc3545;\n        color: #721c24;\n      }\n      \n      .alert.success {\n        background: #d4edda;\n        border-color: #28a745;\n        color: #155724;\n      }\n      \n      .dashboard-metrics {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n        gap: 20px;\n        margin-bottom: 30px;\n      }\n      \n      .metric-card {\n        background: white;\n        padding: 20px;\n        border-radius: 8px;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        text-align: center;\n      }\n      \n      .metric-card h3 {\n        margin: 0 0 10px 0;\n        color: #666;\n        font-size: 14px;\n        text-transform: uppercase;\n      }\n      \n      .metric-value {\n        font-size: 2.5em;\n        font-weight: bold;\n        color: #333;\n        margin-bottom: 5px;\n      }\n      \n      .metric-change {\n        font-size: 0.9em;\n        padding: 3px 8px;\n        border-radius: 4px;\n      }\n      \n      .metric-change.positive {\n        background: #d4edda;\n        color: #155724;\n      }\n      \n      .metric-change.negative {\n        background: #f8d7da;\n        color: #721c24;\n      }\n      \n      .dashboard-charts {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n        gap: 20px;\n        margin-bottom: 30px;\n      }\n      \n      .chart-container {\n        background: white;\n        padding: 20px;\n        border-radius: 8px;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n      \n      .chart-container h3 {\n        margin: 0 0 15px 0;\n        color: #333;\n      }\n      \n      .dashboard-tables {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n        gap: 20px;\n      }\n      \n      .table-container {\n        background: white;\n        padding: 20px;\n        border-radius: 8px;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n      \n      .real-time-indicator {\n        display: inline-block;\n        width: 8px;\n        height: 8px;\n        background: #28a745;\n        border-radius: 50%;\n        margin-right: 5px;\n        animation: pulse 2s infinite;\n      }\n      \n      @keyframes pulse {\n        0% { opacity: 1; }\n        50% { opacity: 0.5; }\n        100% { opacity: 1; }\n      }\n      \n      .event-item {\n        padding: 8px 0;\n        border-bottom: 1px solid #eee;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      \n      .event-time {\n        font-size: 0.8em;\n        color: #666;\n      }\n    ",document.head.appendChild(e)}setupFilters(){document.getElementById("dateRange").addEventListener("change",(e=>{this.filters.dateRange=e.target.value,"custom"===e.target.value?(document.getElementById("startDate").style.display="inline",document.getElementById("endDate").style.display="inline"):(document.getElementById("startDate").style.display="none",document.getElementById("endDate").style.display="none",this.refreshData())})),["startDate","endDate"].forEach((e=>{document.getElementById(e).addEventListener("change",(()=>{"custom"===this.filters.dateRange&&this.refreshData()}))})),["deviceFilter","browserFilter","personaFilter"].forEach((e=>{document.getElementById(e).addEventListener("change",(t=>{const n=e.replace("Filter","")+"s";this.filters[n]=Array.from(t.target.selectedOptions).map((e=>e.value)),this.refreshData()}))})),document.getElementById("refreshBtn").addEventListener("click",(()=>{this.refreshData()})),document.getElementById("autoRefresh").addEventListener("change",(e=>{this.config.autoRefresh=e.target.checked,this.config.autoRefresh?this.startAutoRefresh():this.stopAutoRefresh()}))}setupRealTimeUpdates(){this.config.enableRealTime&&(window.addEventListener("standlog_real_time_event",(e=>{this.handleRealTimeEvent(e.detail)})),this.setupWebSocketConnection())}setupWebSocketConnection(){setInterval((()=>{this.simulateRealTimeEvent()}),5e3)}simulateRealTimeEvent(){const e=["pageview","click","form_submit","custom"],t={type:e[Math.floor(Math.random()*e.length)],timestamp:Date.now(),userId:`user_${Math.floor(1e3*Math.random())}`,page:{url:window.location.href,title:document.title}};this.handleRealTimeEvent(t)}handleRealTimeEvent(e){this.data.events.unshift(e),this.data.events.length>100&&(this.data.events=this.data.events.slice(0,100)),this.updateRealTimeActivity(),this.updateMetricsFromEvent(e),this.checkAlerts(e)}async loadInitialData(){await this.fetchMetrics(),await this.fetchEvents(),this.updateAllWidgets()}async fetchMetrics(){this.data.metrics={users:{current:1250,previous:1180,change:5.9},pageViews:{current:15420,previous:14250,change:8.2},sessions:{current:3240,previous:3100,change:4.5},bounceRate:{current:45.2,previous:48.1,change:-6}}}async fetchEvents(){this.data.events=[]}updateAllWidgets(){this.updateMetricCards(),this.updateCharts(),this.updateTables()}updateMetricCards(){Object.entries(this.data.metrics).forEach((([e,t])=>{const n=document.getElementById(`${e}Value`),a=document.getElementById(`${e}Change`);if(n&&a){n.textContent=this.formatMetricValue(e,t.current);const i=`${t.change>0?"+":""}${t.change.toFixed(1)}%`;a.textContent=i,a.className="metric-change "+(t.change>=0?"positive":"negative")}}))}formatMetricValue(e,t){switch(e){case"users":case"pageViews":case"sessions":return this.formatNumber(t);case"bounceRate":return`${t.toFixed(1)}%`;default:return t.toString()}}formatNumber(e){return e.toLocaleString()}updateCharts(){this.updateTrafficChart(),this.updateDeviceChart(),this.updateTopPagesChart(),this.updatePersonasChart()}updateTrafficChart(){const e=document.getElementById("trafficChart"),t=e.getContext("2d");e.width=e.offsetWidth,e.height=200,t.clearRect(0,0,e.width,e.height),t.strokeStyle="#2196F3",t.lineWidth=2,t.beginPath();const n=[120,150,180,220,190,250,280,320,290,340],a=e.width/(n.length-1);n.forEach(((n,i)=>{const s=i*a,r=e.height-n/340*e.height;0===i?t.moveTo(s,r):t.lineTo(s,r)})),t.stroke()}updateDeviceChart(){const e=document.getElementById("deviceChart"),t=e.getContext("2d");e.width=e.offsetWidth,e.height=200,t.clearRect(0,0,e.width,e.height);let n=0;const a=e.width/2,i=e.height/2,s=Math.min(a,i)-20;[{label:"Desktop",value:60,color:"#4CAF50"},{label:"Mobile",value:35,color:"#2196F3"},{label:"Tablet",value:5,color:"#FF9800"}].forEach((e=>{const r=e.value/100*2*Math.PI;t.fillStyle=e.color,t.beginPath(),t.moveTo(a,i),t.arc(a,i,s,n,n+r),t.closePath(),t.fill(),n+=r}))}updateTopPagesChart(){const e=document.getElementById("topPagesChart"),t=[{url:"/home",views:1250},{url:"/products",views:890},{url:"/about",views:650},{url:"/contact",views:420},{url:"/blog",views:320}],n=Math.max(...t.map((e=>e.views)));e.innerHTML=t.map((e=>`\n      <div style="display: flex; align-items: center; margin-bottom: 10px;">\n        <div style="width: 120px; font-size: 0.9em;">${e.url}</div>\n        <div style="flex: 1; background: #f0f0f0; height: 20px; margin: 0 10px; border-radius: 10px;">\n          <div style="background: #2196F3; height: 100%; width: ${e.views/n*100}%; border-radius: 10px;"></div>\n        </div>\n        <div style="width: 60px; text-align: right; font-size: 0.9em;">${this.formatNumber(e.views)}</div>\n      </div>\n    `)).join("")}updatePersonasChart(){const e=document.getElementById("personasChart"),t=e.getContext("2d");e.width=e.offsetWidth,e.height=200,t.clearRect(0,0,e.width,e.height);const n=[{name:"Power User",count:180,color:"#4CAF50"},{name:"Casual User",count:520,color:"#2196F3"},{name:"Bouncer",count:320,color:"#F44336"},{name:"Mobile User",count:420,color:"#FF9800"},{name:"Converter",count:150,color:"#9C27B0"}],a=Math.max(...n.map((e=>e.count))),i=e.width/n.length-10;n.forEach(((n,s)=>{const r=s*(i+10)+5,o=n.count/a*(e.height-30),d=e.height-o-20;t.fillStyle=n.color,t.fillRect(r,d,i,o),t.fillStyle="#333",t.font="12px Arial",t.textAlign="center",t.fillText(n.count.toString(),r+i/2,d-5)}))}updateTables(){this.updateRealTimeActivity(),this.updateRecentEvents()}updateRealTimeActivity(){const e=document.getElementById("realTimeActivity"),t=this.data.events.slice(0,10);e.innerHTML=`\n      <div style="margin-bottom: 15px;">\n        <span class="real-time-indicator"></span>\n        <strong>Live Activity</strong>\n      </div>\n      ${t.map((e=>`\n        <div class="event-item">\n          <div>\n            <strong>${e.type}</strong> \n            ${e.page?`on ${e.page.title||e.page.url}`:""}\n          </div>\n          <div class="event-time">${this.formatTime(e.timestamp)}</div>\n        </div>\n      `)).join("")}\n    `}updateRecentEvents(){const e=document.getElementById("recentEvents"),t=this.data.events.slice(0,15);e.innerHTML=t.map((e=>`\n      <div class="event-item">\n        <div>\n          <strong>${e.userId}</strong> - ${e.type}\n          ${e.page?`<br><small>${e.page.url}</small>`:""}\n        </div>\n        <div class="event-time">${this.formatTime(e.timestamp)}</div>\n      </div>\n    `)).join("")}formatTime(e){return new Date(e).toLocaleTimeString()}updateMetricsFromEvent(e){"pageview"===e.type&&(this.data.metrics.pageViews.current++,document.getElementById("pageViewsValue").textContent=this.formatNumber(this.data.metrics.pageViews.current))}checkAlerts(e){if(!this.config.enableAlerts)return;const t=[];this.data.events.filter((e=>Date.now()-e.timestamp<6e4)).length>10&&t.push({type:"warning",message:"Traffic spike detected in the last minute"}),"error"===e.type&&t.push({type:"danger",message:"Error event detected"}),this.displayAlerts(t)}displayAlerts(e){document.getElementById("alertsContainer").innerHTML=e.map((e=>`\n      <div class="alert ${e.type}">\n        ${e.message}\n        <button onclick="this.parentElement.style.display='none'" style="float: right; background: none; border: none; font-size: 18px;">&times;</button>\n      </div>\n    `)).join("")}async refreshData(){await this.loadInitialData()}startAutoRefresh(){this.refreshTimer&&clearInterval(this.refreshTimer),this.refreshTimer=setInterval((()=>{this.refreshData()}),this.config.refreshInterval)}stopAutoRefresh(){this.refreshTimer&&(clearInterval(this.refreshTimer),this.refreshTimer=null)}exportData(e="json"){const t={metrics:this.data.metrics,events:this.data.events,filters:this.filters,timestamp:Date.now()};return"csv"===e?this.convertToCSV(t):JSON.stringify(t,null,2)}convertToCSV(e){const t=[["timestamp","type","userId","page"].join(",")];return e.events.forEach((e=>{t.push([new Date(e.timestamp).toISOString(),e.type,e.userId,e.page?.url||""].join(","))})),t.join("\n")}destroy(){this.stopAutoRefresh(),this.container&&(this.container.innerHTML="")}}"undefined"!=typeof module&&module.exports?module.exports=AnalyticsDashboard:window.AnalyticsDashboard=AnalyticsDashboard;